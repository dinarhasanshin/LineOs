{"version":3,"sources":["components/Environment_Indicators/EnvironmentsIndicators.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","screenSize/forceScreenSize.ts","index.tsx","components/Environment_Indicators/EnvironmentsIndicators.module.css","App.module.css"],"names":["BatteryIndicator","battery_level","color","useEffect","setState","style","useState","state","className","s","batteryIndicator","level","width","toString","CommunicationIndicator","communication_level","levels","height","communicationLevel","communication","communicationIndicator","map","value","index","backgroundColor","communicationLevelName","TimeIndicator","time","timeIndicator","App","DeviceFrameset","device","margin","app_container","left_header","right_header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","addEventListener","resizeTo","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","module","exports"],"mappings":"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","file":"static/js/main.e949852a.chunk.js","sourcesContent":["import React, {FC, useEffect, useState} from 'react';\r\nimport s from './EnvironmentsIndicators.module.css';\r\nimport {BatteryIndicatorsType, CommunicationIndicatorsType, CommunicationLevelType, TimeIndicatorsType} from \"../../types/types\";\r\n\r\n\r\n\r\nexport const BatteryIndicator: FC<BatteryIndicatorsType> = ({battery_level, color}) => {\r\n\r\n    useEffect(() => {\r\n        setState({style: {'--color-battery': color}})\r\n    }, [color])\r\n\r\n    const [state, setState] = useState<any>({\r\n        style: {'--color-battery': 'white'}\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={s.batteryIndicator} style={state.style}>\r\n            <div className={s.level} style={{width: battery_level.toString() + '%'}}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const CommunicationIndicator: FC<CommunicationIndicatorsType> = ({communication_level,color }) => {\r\n\r\n    const [communicationLevel, setCommunicationLevel] = useState<CommunicationLevelType>({\r\n\r\n        levels: [25, 50, 75, 100],\r\n        height: [3, 5, 7, 9]\r\n\r\n        })\r\n\r\n\r\n    return (\r\n        <div className={s.communication}>\r\n\r\n            <div className={s.communicationIndicator}>\r\n                {\r\n                    communicationLevel.height.map((value, index) => (\r\n\r\n                        <div key={index} className={s.communicationLevel} style={{height: value.toString() + 'px', backgroundColor: color} }>\r\n\r\n                        </div>\r\n                    ))\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className={s.communicationLevelName}>\r\n                <span>5G</span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport const TimeIndicator: FC<TimeIndicatorsType> = ({color, time}) => {\r\n    return (\r\n        <div className={s.timeIndicator}>\r\n            <span style={{color: color}}>{time}</span>\r\n        </div>\r\n    );\r\n};","import React from 'react';\nimport { useSpring, animated } from '@react-spring/web'\nimport {useDrag, usePinch} from '@use-gesture/react'\nimport s from './App.module.css';\nimport { DeviceFrameset } from 'react-device-frameset'\nimport 'react-device-frameset/lib/css/marvel-devices.min.css'\nimport {\n    BatteryIndicator,\n    CommunicationIndicator,\n    TimeIndicator\n} from \"./components/Environment_Indicators/EnvironmentsIndicators\";\n\nexport const App = () => {\n\n  // const [{ x, y }, api] = useSpring(() => ({ x: 0, y: 0 }))\n  //\n  //\n  //   const bind_ = usePinch(state => {\n  //       const {\n  //           da,            // [d,a] absolute distance and angle of the two pointers\n  //           origin,        // coordinates of the center between the two touch event\n  //           offset,        // [scale, angle] offsets (starts withs scale=1)\n  //       } = state\n  //   });\n  // // Set the drag hook and define component movement based on gesture data\n  // const bind = useDrag(({ active, swipe: [mx, my], cancel, intentional, velocity }) => {\n  //   api.start({ x: active ? mx : 0, y: active ? my : 0, immediate: active })\n  //     if (velocity[1] >= 1 && velocity[0] >= 1){\n  //         console.log(intentional)\n  //         console.log(velocity)\n  //     }\n  //\n  // })\n\n  return (\n      <DeviceFrameset device={\"iPhone X\"} style={{margin: '0 auto'}} >\n\n          <div className={s.app_container}>\n              <header>\n                  <div className={s.left_header}>\n                      <TimeIndicator time={'10:06'} color={'white'}/>\n                  </div>\n                  <div className={s.right_header}>\n                      <CommunicationIndicator communication_level={25} color={'white'}/>\n                      <BatteryIndicator battery_level={20} color={'white'}/>\n                  </div>\n              </header>\n\n\n          {/*    <animated.div {...bind()} style={{ x, y }} className={s.app_block} />*/}\n          </div>\n      </DeviceFrameset>\n\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import insideInstalledApp from './insideInstalledApp'\r\n\r\nexport default (width: number, height: number) => {\r\n    if (true) {\r\n        window.addEventListener('resize', () => {\r\n            window.resizeTo(width, height)\r\n        })\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport forceScreenSize from './screenSize/forceScreenSize';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nforceScreenSize(390, 783);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"batteryIndicator\":\"EnvironmentsIndicators_batteryIndicator__2g6Ot\",\"level\":\"EnvironmentsIndicators_level__ibG1S\",\"communication\":\"EnvironmentsIndicators_communication__19vmv\",\"communicationIndicator\":\"EnvironmentsIndicators_communicationIndicator__3kLqt\",\"communicationLevel\":\"EnvironmentsIndicators_communicationLevel__AY-8R\",\"communicationLevelName\":\"EnvironmentsIndicators_communicationLevelName__3EG58\",\"timeIndicator\":\"EnvironmentsIndicators_timeIndicator__1fZIX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_container\":\"App_app_container__35UVB\",\"app_block\":\"App_app_block__FKQUm\",\"left_header\":\"App_left_header__pjlK5\",\"right_header\":\"App_right_header__1lgWT\"};"],"sourceRoot":""}